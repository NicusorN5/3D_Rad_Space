# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: C++ CMake on Windows-x64

env: 
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

on:
  workflow_call:

jobs:
  build:
    runs-on: [${{ matrix.os }}, self-hosted]

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        #os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        #c_compiler: [gcc, clang, cl]
        c_compiler: [cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          #- os: ubuntu-latest
          #  c_compiler: gcc
          #  cpp_compiler: g++
          #- os: ubuntu-latest
          #  c_compiler: clang
          #  cpp_compiler: clang++
        #exclude:
          #- os: windows-latest
          #  c_compiler: gcc
          #- os: windows-latest
          #  c_compiler: clang
          #- os: ubuntu-latest
          #  c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: vcpkg restore
      uses: johnwason/vcpkg-action@v6
      id: vcpkg
      with:
        # The vcpkg packages to build, separated by spaces. Cannot be used with manifest-dir
        pkgs: 'assimp directxtk freetype nlohmann-json openal-soft physx angelscript gtest'
        # The vcpkg target triplet to use. This must be set. For windows, 
        # x64-windows-release is recommended if you don't need debug libraries
        triplet: 'x64-windows-release'
        # Extra arguments to pass to vcpkg command (optional)
        extra-args: ''
        # vcpkg revision to checkout
        # A valid git ref; if empty, it defaults to the latest vcpkg stable release.
        revision: ''
        # GitHub token to authenticate API requests. This is necessary to determine vcpkg version to checkout
        # Recommended to use ${{ github.token }}
        token: ${{ github.token }}
        # "Use vcpkg built-in GitHub binary caching if "true". If not specified, will use the dry-run based file cache."
        # Recommended set to "true"
        #github-binarycache: true
        #Fetch depth for vcpkg checkout. Defaults to "1"
        fetch-depth: '1'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=x64-windows-release
        -DVCPKG_MANIFEST_MODE=OFF
        -S ${{ github.workspace }}/3DRadSpace

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} 
